% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helperFunctions.R
\name{semPower.genSigma}
\alias{semPower.genSigma}
\title{semPower.genSigma}
\usage{
semPower.genSigma(
  Phi = NULL,
  Lambda = NULL,
  tau = NULL,
  Alpha = NULL,
  loadings = NULL,
  nIndicator = NULL,
  loadM = NULL,
  loadSD = NULL,
  loadMinMax = NULL,
  useReferenceIndicator = FALSE,
  ...
)
}
\arguments{
\item{Phi}{factor correlation matrix or single number giving correlation between all factors or NULL for a uncorrelated factors.}

\item{Lambda}{factor loading matrix (standardized).}

\item{tau}{intercepts. If NULL and alpha is set, these are assumed to be zero.}

\item{Alpha}{factor means. If NUll and tau is set, these are assumed to be zero.}

\item{loadings}{a list providing the standardized factor loadings by factor. Must not contain secondary loadings.}

\item{nIndicator}{vector indicating the number of indicators for each factor, e.g. c(4, 6) to define two factors with 4 and 6 indicators, respectively}

\item{loadM}{vector giving mean loadings for each factor or single number to use for every loading}

\item{loadSD}{vector giving the standard deviation of loadings for each factor for use in conjunction with loadM. When NULL, SDs are set to zero.}

\item{loadMinMax}{list giving the minimum and maximum loading for each factor or vector to apply to all factors}

\item{useReferenceIndicator}{whether to identify factors in accompanying true model string by a reference indicator (TRUE) or by setting their variance to 1 (FALSE). ()giving the minimum and maximum loading for each factor or vector to apply to all factors}
}
\value{
a list containing the implied covariance matrix (Sigma),  the implied loading (Lambda) and factor-covariance matrix (Phi), the implied indicator means (mu), intercepts (tau), and latent means (alpha), as well as the associated lavaan model string defining the population (modelPop) and a lavaan model string defining a corresponding true cfa analysis model (modelTrue)
}
\description{
Generate a covariance matrix and associated lavaan model strings based on defined model features.
This requires the lavaan package.
}
\examples{
\dontrun{
# Provide factor correlation for a two-factor model, the number of indicators by factor, 
# and a single loading which is equal for all indicators
genSigma <- semPower.genSigma(phi = .2, nIndicator = c(5, 6), loadM = .5)

# Provide factor correlation matrix and loading matrix
Phi <- matrix(c(
                c(1.0, 0.2, 0.5),
                c(0.2, 1.0, 0.3),
                c(0.5, 0.3, 1.0)
               ), byrow = TRUE, ncol = 3)
Lambda <- matrix(c(
                c(0.5, 0.0, 0.0),
                c(0.4, 0.0, 0.0),
                c(0.3, 0.0, 0.0),
                c(0.0, 0.7, 0.0),
                c(0.0, 0.8, 0.0),
                c(0.0, 0.5, 0.0),
                c(0.0, 0.0, 0.5),
                c(0.0, 0.0, 0.4),
                c(0.0, 0.0, 0.6),
               ), byrow = TRUE, ncol = 3)
               
genSigma <- semPower.genSigma(Phi = Phi, Lambda = Lambda)

# same as above, but providing reduced loading matrix, i.e..
# only defining primary loadings; all secondary loadings are zero.
loadings <- list(
               c(0.4, 0.5, 0.8),
               c(0.7, 0.6, 0.5, 0.4, 0.5),
               c(0.5, 0.5, 0.6, 0.8)
               )
               
genSigma <- semPower.genSigma(Phi = Phi, loadings = loadings)
  
# same as above, but providing
# the number of indicators by factor 
# and min-max loading for all factors (sampling from a uniform)
genSigma <- semPower.genSigma(Phi = Phi, nIndicator = c(3, 5, 4), 
                              loadMinMax = c(.3, .8))

# same as above, but providing mean and sd loading for all factors
genSigma <- semPower.genSigma(Phi = Phi, nIndicator = c(3, 5, 4), 
                              loadM = .5, loadSD = .1)


# same as above, but providing mean and sd of loadings for each factor
genSigma <- semPower.genSigma(Phi = Phi, nIndicator = c(3, 5, 4), 
                              loadM = c(.5, .6, .7), loadSD = c(0, .05, .01))

# same as above, but using min-max loadings for each factor
loadMinMax <- list(
                   c(.4, .6),
                   c(.5, .8),
                   c(.3, .7)
                   )

genSigma <- semPower.genSigma(Phi = Phi, nIndicator = c(3, 5, 4), 
                              loadMinMax = loadMinMax)
                              
}
}
