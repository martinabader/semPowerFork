% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate.R
\name{simulate}
\alias{simulate}
\title{simulate}
\usage{
simulate(
  modelH0 = NULL,
  modelH1 = NULL,
  Sigma = NULL,
  mu = NULL,
  N = NULL,
  alpha = NULL,
  nReplications = 250,
  minConvergenceRate = 0.5,
  lavOptions = NULL,
  lavOptionsH1 = lavOptions,
  returnFmin = TRUE
)
}
\arguments{
\item{modelH0}{\code{lavaan} model string defining the (incorrect) analysis model.}

\item{modelH1}{\code{lavaan} model string defining the comparison model. If omitted, the saturated model is the comparison model.}

\item{Sigma}{population covariance matrix.}

\item{mu}{population means.}

\item{N}{sample size}

\item{alpha}{alpha error probability}

\item{nReplications}{number of random samples drawn.}

\item{minConvergenceRate}{the minimum convergence rate required}

\item{lavOptions}{a list of additional options passed to \code{lavaan}, e. g., \code{list(estimator = 'mlm')} to request robust ML estimation}

\item{lavOptionsH1}{lavoptions when fitting \code{modelH1}. If \code{NULL}, the same as \code{lavOptions}.}

\item{returnFmin}{whether to return the mean unbiased Fmin over replications (i. e., \code{fmin_0 = fmin_hat - df/N})}
}
\value{
Returns empirical power: \code{sum(p < alpha) / nReplications} or a list (if \code{returnFmin = TRUE}) with the following components:
\item{\code{ePower}}{the empirical power.}
\item{\code{meanFmin}}{the estimated mean unbiased Fmin over replications (i. e., \code{fmin_0 = fmin_hat - df/N}).}
\item{\code{meanFminGroups}}{the estimated mean unbiased Fmin by groups given as a vector, assuming the df spread equally over groups. Therefore, \code{meanFmin != sum(meanFminGroups)}}
\item{\code{df}}{the model df.}
\item{\code{nrep}}{the successful number of replications.}
}
\description{
Estimates empirical power using a simulation approach.
}
\examples{
\dontrun{
# get Sigma and modelH0
powerCFA <- semPower.powerCFA(type = 'a-priori',
                              comparison = 'saturated',
                              Phi = .2, loadings = list(rep(.5, 3), rep(.7, 3)), 
                              alpha = .05, beta = .05)
# perform simulation       
simulate(modelH0 = powerCFA$modelH0, 
         powerCFA$Sigma,
         N = powerCFA$power$requiredN,
         alpha = powerCFA$power$alpha)
}
}
